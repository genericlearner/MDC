[COMMENT, // ====== struct declarations ====== //, 1]
[CLASS, class, 2]
[ID, POLYNOMIAL, 2]
[OPENCURLY, {, 2]
[PUBLIC, public, 3]
[FUNCTION, function, 3]
[ID, evaluate, 3]
[OPENPAR, (, 3]
[ID, x, 3]
[COLON, :, 3]
[FLOAT_T, float, 3]
[CLOSEPAR, ), 3]
[ARROW, =>, 3]
[FLOAT_T, float, 3]
[SEMICOLON, ;, 3]
[CLOSECURLY, }, 4]
[SEMICOLON, ;, 4]
[CLASS, class, 6]
[ID, LINEAR, 6]
[ISA, isa, 6]
[ID, POLYNOMIAL, 6]
[OPENCURLY, {, 6]
[PRIVATE, private, 7]
[ATTRIBUTE, attribute, 7]
[ID, a, 7]
[COLON, :, 7]
[FLOAT_T, float, 7]
[SEMICOLON, ;, 7]
[PRIVATE, private, 8]
[ATTRIBUTE, attribute, 8]
[ID, b, 8]
[COLON, :, 8]
[FLOAT_T, float, 8]
[SEMICOLON, ;, 8]
[PUBLIC, public, 9]
[FUNCTION, function, 9]
[ID, build, 9]
[OPENPAR, (, 9]
[ID, A, 9]
[COLON, :, 9]
[FLOAT_T, float, 9]
[COMMA, ,, 9]
[ID, B, 9]
[COLON, :, 9]
[FLOAT_T, float, 9]
[CLOSEPAR, ), 9]
[ARROW, =>, 9]
[ID, LINEAR, 9]
[SEMICOLON, ;, 9]
[PUBLIC, public, 10]
[FUNCTION, function, 10]
[ID, evaluate, 10]
[OPENPAR, (, 10]
[ID, x, 10]
[COLON, :, 10]
[FLOAT_T, float, 10]
[CLOSEPAR, ), 10]
[ARROW, =>, 10]
[FLOAT_T, float, 10]
[SEMICOLON, ;, 10]
[CLOSECURLY, }, 11]
[SEMICOLON, ;, 11]
[CLASS, class, 13]
[ID, QUADRATIC, 13]
[ISA, isa, 13]
[ID, POLYNOMIAL, 13]
[OPENCURLY, {, 13]
[PRIVATE, private, 14]
[ATTRIBUTE, attribute, 14]
[ID, a, 14]
[COLON, :, 14]
[FLOAT_T, float, 14]
[SEMICOLON, ;, 14]
[PRIVATE, private, 15]
[ATTRIBUTE, attribute, 15]
[ID, b, 15]
[COLON, :, 15]
[FLOAT_T, float, 15]
[SEMICOLON, ;, 15]
[PRIVATE, private, 16]
[ATTRIBUTE, attribute, 16]
[ID, c, 16]
[COLON, :, 16]
[FLOAT_T, float, 16]
[SEMICOLON, ;, 16]
[PUBLIC, public, 17]
[FUNCTION, function, 17]
[ID, build, 17]
[OPENPAR, (, 17]
[ID, A, 17]
[COLON, :, 17]
[FLOAT_T, float, 17]
[COMMA, ,, 17]
[ID, B, 17]
[COLON, :, 17]
[FLOAT_T, float, 17]
[COMMA, ,, 17]
[ID, C, 17]
[COLON, :, 17]
[FLOAT_T, float, 17]
[CLOSEPAR, ), 17]
[ARROW, =>, 17]
[ID, QUADRATIC, 17]
[SEMICOLON, ;, 17]
[PUBLIC, public, 18]
[FUNCTION, function, 18]
[ID, evaluate, 18]
[OPENPAR, (, 18]
[ID, x, 18]
[COLON, :, 18]
[FLOAT_T, float, 18]
[CLOSEPAR, ), 18]
[ARROW, =>, 18]
[FLOAT_T, float, 18]
[SEMICOLON, ;, 18]
[CLOSECURLY, }, 19]
[SEMICOLON, ;, 19]
[COMMENT, // ====== struct implementations ====== //, 21]
[IMPLEMENTATION, implementation, 22]
[ID, POLYNOMIAL, 22]
[OPENCURLY, {, 22]
[FUNCTION, function, 23]
[ID, evaluate, 23]
[OPENPAR, (, 23]
[ID, x, 23]
[COLON, :, 23]
[FLOAT_T, float, 23]
[CLOSEPAR, ), 23]
[ARROW, =>, 23]
[FLOAT_T, float, 24]
[OPENCURLY, {, 24]
[RETURN, return, 25]
[OPENPAR, (, 25]
[INTEGER_VAL, 0, 25]
[CLOSEPAR, ), 25]
[SEMICOLON, ;, 25]
[CLOSECURLY, }, 26]
[CLOSECURLY, }, 27]
[IMPLEMENTATION, implementation, 29]
[ID, QUADRATIC, 29]
[OPENCURLY, {, 29]
[FUNCTION, function, 30]
[ID, evaluate, 30]
[OPENPAR, (, 30]
[ID, x, 30]
[COLON, :, 30]
[FLOAT_T, float, 30]
[CLOSEPAR, ), 30]
[ARROW, =>, 30]
[FLOAT_T, float, 31]
[OPENCURLY, {, 31]
[LOCAL, local, 32]
[ID, result, 32]
[COLON, :, 32]
[FLOAT_T, float, 32]
[SEMICOLON, ;, 32]
[COMMENT, //Using Horner's method, 33]
[ID, result, 34]
[ASSIGN, :=, 34]
[ID, a, 34]
[SEMICOLON, ;, 34]
[ID, result, 35]
[ASSIGN, :=, 35]
[ID, result, 35]
[MULT, *, 35]
[ID, x, 35]
[ADD, +, 35]
[ID, b, 35]
[SEMICOLON, ;, 35]
[ID, result, 36]
[ASSIGN, :=, 36]
[ID, result, 36]
[MULT, *, 36]
[ID, x, 36]
[ADD, +, 36]
[ID, c, 36]
[SEMICOLON, ;, 36]
[RETURN, return, 37]
[OPENPAR, (, 37]
[ID, result, 37]
[CLOSEPAR, ), 37]
[SEMICOLON, ;, 37]
[CLOSECURLY, }, 38]
[FUNCTION, function, 39]
[ID, build, 39]
[OPENPAR, (, 39]
[ID, A, 39]
[COLON, :, 39]
[FLOAT_T, float, 39]
[COMMA, ,, 39]
[ID, B, 39]
[COLON, :, 39]
[FLOAT_T, float, 39]
[COMMA, ,, 39]
[ID, C, 39]
[COLON, :, 39]
[FLOAT_T, float, 39]
[CLOSEPAR, ), 39]
[ARROW, =>, 39]
[ID, QUADRATIC, 39]
[OPENCURLY, {, 40]
[LOCAL, local, 41]
[ID, new_function, 41]
[COLON, :, 41]
[ID, QUADRATIC, 41]
[SEMICOLON, ;, 41]
[ID, new_function, 42]
[DOT, ., 42]
[ID, a, 42]
[ASSIGN, :=, 42]
[ID, A, 42]
[SEMICOLON, ;, 42]
[ID, new_function, 43]
[DOT, ., 43]
[ID, b, 43]
[ASSIGN, :=, 43]
[ID, B, 43]
[SEMICOLON, ;, 43]
[ID, new_function, 44]
[DOT, ., 44]
[ID, c, 44]
[ASSIGN, :=, 44]
[ID, C, 44]
[SEMICOLON, ;, 44]
[RETURN, return, 45]
[OPENPAR, (, 45]
[ID, new_function, 45]
[CLOSEPAR, ), 45]
[SEMICOLON, ;, 45]
[CLOSECURLY, }, 46]
[CLOSECURLY, }, 47]
[IMPLEMENTATION, implementation, 49]
[ID, LINEAR, 49]
[OPENCURLY, {, 49]
[FUNCTION, function, 50]
[ID, build, 50]
[OPENPAR, (, 50]
[ID, A, 50]
[COLON, :, 50]
[FLOAT_T, float, 50]
[COMMA, ,, 50]
[ID, B, 50]
[COLON, :, 50]
[FLOAT_T, float, 50]
[CLOSEPAR, ), 50]
[ARROW, =>, 50]
[ID, LINEAR, 50]
[OPENCURLY, {, 51]
[LOCAL, local, 52]
[ID, new_function, 52]
[COLON, :, 52]
[ID, LINEAR, 52]
[SEMICOLON, ;, 52]
[ID, new_function, 53]
[DOT, ., 53]
[ID, a, 53]
[ASSIGN, :=, 53]
[ID, A, 53]
[SEMICOLON, ;, 53]
[ID, new_function, 54]
[DOT, ., 54]
[ID, b, 54]
[ASSIGN, :=, 54]
[ID, B, 54]
[SEMICOLON, ;, 54]
[RETURN, return, 55]
[OPENPAR, (, 55]
[ID, new_function, 55]
[CLOSEPAR, ), 55]
[SEMICOLON, ;, 55]
[CLOSECURLY, }, 56]
[FUNCTION, function, 57]
[ID, evaluate, 57]
[OPENPAR, (, 57]
[ID, x, 57]
[COLON, :, 57]
[FLOAT_T, float, 57]
[CLOSEPAR, ), 57]
[ARROW, =>, 57]
[FLOAT_T, float, 57]
[OPENCURLY, {, 58]
[LOCAL, local, 59]
[ID, result, 59]
[COLON, :, 59]
[FLOAT_T, float, 59]
[SEMICOLON, ;, 59]
[ID, result, 60]
[ASSIGN, :=, 60]
[FLOAT_VAL, 0.0, 60]
[SEMICOLON, ;, 60]
[ID, result, 61]
[ASSIGN, :=, 61]
[ID, a, 61]
[MULT, *, 61]
[ID, x, 61]
[ADD, +, 61]
[ID, b, 61]
[SEMICOLON, ;, 61]
[RETURN, return, 62]
[OPENPAR, (, 62]
[ID, result, 62]
[CLOSEPAR, ), 62]
[SEMICOLON, ;, 62]
[CLOSECURLY, }, 63]
[CLOSECURLY, }, 64]
[COMMENT, // ====== main ====== //, 66]
[ID, func, 67]
[ID, main, 67]
[OPENPAR, (, 67]
[CLOSEPAR, ), 67]
[ARROW, =>, 67]
[VOID, void, 68]
[OPENCURLY, {, 68]
[LOCAL, local, 69]
[ID, f1, 69]
[COLON, :, 69]
[ID, LINEAR, 69]
[SEMICOLON, ;, 69]
[LOCAL, local, 70]
[ID, f2, 70]
[COLON, :, 70]
[ID, QUADRATIC, 70]
[SEMICOLON, ;, 70]
[LOCAL, local, 71]
[ID, counter, 71]
[COLON, :, 71]
[INT_T, int, 71]
[SEMICOLON, ;, 71]
[ID, f1, 72]
[ASSIGN, :=, 72]
[ID, f1, 72]
[DOT, ., 72]
[ID, build, 72]
[OPENPAR, (, 72]
[INTEGER_VAL, 2, 72]
[COMMA, ,, 72]
[FLOAT_VAL, 3.5, 72]
[CLOSEPAR, ), 72]
[SEMICOLON, ;, 72]
[ID, f2, 73]
[ASSIGN, :=, 73]
[ID, f2, 73]
[DOT, ., 73]
[ID, build, 73]
[OPENPAR, (, 73]
[SUBT, -, 73]
[FLOAT_VAL, 2.0, 73]
[COMMA, ,, 73]
[FLOAT_VAL, 1.0, 73]
[COMMA, ,, 73]
[FLOAT_VAL, 0.0, 73]
[CLOSEPAR, ), 73]
[SEMICOLON, ;, 73]
[ID, counter, 74]
[ASSIGN, :=, 74]
[INTEGER_VAL, 1, 74]
[SEMICOLON, ;, 74]
[WHILE, while, 76]
[OPENPAR, (, 76]
[ID, counter, 76]
[LTEQ, <=, 76]
[INTEGER_VAL, 10, 76]
[CLOSEPAR, ), 76]
[OPENCURLY, {, 77]
[WRITE, write, 78]
[OPENPAR, (, 78]
[ID, counter, 78]
[CLOSEPAR, ), 78]
[SEMICOLON, ;, 78]
[WRITE, write, 79]
[OPENPAR, (, 79]
[ID, f1, 79]
[DOT, ., 79]
[ID, evaluate, 79]
[OPENPAR, (, 79]
[ID, counter, 79]
[CLOSEPAR, ), 79]
[CLOSEPAR, ), 79]
[SEMICOLON, ;, 79]
[WRITE, write, 80]
[OPENPAR, (, 80]
[ID, f2, 80]
[DOT, ., 80]
[ID, evaluate, 80]
[OPENPAR, (, 80]
[ID, counter, 80]
[CLOSEPAR, ), 80]
[CLOSEPAR, ), 80]
[SEMICOLON, ;, 80]
[CLOSECURLY, }, 81]
[SEMICOLON, ;, 81]
[CLOSECURLY, }, 82]
[BLOCK_COMMENT, **
    classes
    --------------------------------------
| | no class declaration
| | class declaration
|X| multiple class declarations
|X| no data member declaration
|X| data member declaration
|X| multiple data member declaration
| | no member function declaration
|X| member function declaration
|X| multiple member function declaration
| | no member
|X| no inherited class
|X| one inherited class
| | multiple inherited classes
|X| private member specifier
|X| public member specifier

    functions: definitions
    --------------------------------------
| | no main function definition
|X| main function definition
|X| no free function definition
| | free function definition
| | multiple free function definitions
| | no member function definition
|X| member function definition
|X| multiple member function definitions
| | return type: void
| | return type: integer
|X| return type: float
|X| return type: id
| | return type: array (not allowed)

    functions: formal parameters
    --------------------------------------
| | type: integer
|X| type: float
| | type: id
| | type: 1-dim array 
| | type: n-dim array
| | type: array (with size)
| | type: array (without size)

    functions: calls
    --------------------------------------
| | free function call
|X| member function call
| | parameters:0
|X| parameters:1
|X| parameters:n
| | array parameter - 1-dim
| | array parameter - n-dim
| | array parameter - with size
| | array parameter - without size
| | function call as statement
|X| function call as expression factor
| | expression as parameter

    variable declaration
    --------------------------------------
| | type: integer
| | type: float
| | type: string
|X| type: id
| | type: 1-dim array 
| | type: n-dim array
| | type: array (with size)
| | type: array (without size)

    function body: local variable declarations
    --------------------------------------
| | no local variable declarations
|X| local variable declarations
| | intertwined statements and variable declarations

    function body: statements
    --------------------------------------
| | no statement
| | 1 statement
|X| n statements
| | if statement
| | if: empty then or else blocks
| | if: 1-statement then or else blocks
| | if: n-statements then or else blocks
|X| while statement
| | while: empty block
| | while: 1-statement block
|X| while: n-statement block
| | read(<variable>) statement
|X| write(<expr>) statement
|X| return(<expr>) statement
|X| assignment statement

    variable + idnest
    --------------------------------------
|X| id
|X| id.id
|X| id.id(id)
| | id(id).id
| | id(id).id()
| | id.id[id]
| | id[id].id
| | id[id].id[id]
| | id.id[id][id]
| | id[id][id].id
| | id[id][id].id[id][id]
| | id(id).id[id]
| | id(id).id[id][id]
| | expression as array index

    expressions
    --------------------------------------
| | single variable
| | involving addop
| | involving multop
| | involving relop
|X| involving addop + multop
| | involving multop + relop
| | involving addop + multop + relop
| | involving parentheses
| | involving nested parenhteses
| | involving not
| | involving sign
| | involving literals
|X| involving variable + idnest
|X| involving function calls
| | involving all the above in one expression
*/, 83]
